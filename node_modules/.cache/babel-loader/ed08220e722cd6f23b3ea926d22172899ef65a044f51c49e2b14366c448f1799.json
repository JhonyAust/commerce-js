{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming Charcha\\\\React Projects\\\\commerce_js\\\\commerce_js\\\\src\\\\contexts\\\\ProductContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { commerce } from \"../lib/commerce\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProductContext = /*#__PURE__*/createContext();\nconst ProductProvider = ({\n  children\n}) => {\n  _s();\n  // products state\n  const [products, setProducts] = useState([]);\n\n  // fetch products\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const {\n          data\n        } = await commerce.products.list();\n        setProducts(data);\n        console.log(\"Products after setProducts:\", products);\n      } catch (error) {\n        console.error(\"Error fetching products:\", error);\n      }\n    };\n    fetchProducts();\n  }, []); // Empty dependency array means this effect runs once when the component mounts\n\n  console.log(\"Products outside useEffect:\", products);\n  return /*#__PURE__*/_jsxDEV(ProductContext.Provider, {\n    value: {\n      products\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductProvider, \"f86L6rLANGURv6GE6gupp7+oOp4=\");\n_c = ProductProvider;\nexport default ProductProvider;\nvar _c;\n$RefreshReg$(_c, \"ProductProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","commerce","ProductContext","ProductProvider","children","products","setProducts","fetchProducts","data","list","console","log","error"],"sources":["D:/Programming Charcha/React Projects/commerce_js/commerce_js/src/contexts/ProductContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { commerce } from \"../lib/commerce\";\n\nexport const ProductContext = createContext();\n\nconst ProductProvider = ({ children }) => {\n  // products state\n  const [products, setProducts] = useState([]);\n  \n  // fetch products\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const { data } = await commerce.products.list();\n        setProducts(data);\n        console.log(\"Products after setProducts:\", products);\n      } catch (error) {\n        console.error(\"Error fetching products:\", error);\n      }\n    };\n\n    fetchProducts();\n  }, []); // Empty dependency array means this effect runs once when the component mounts\n\n  console.log(\"Products outside useEffect:\", products);\n\n  return (\n    <ProductContext.Provider value={{ products }}>\n      {children}\n    </ProductContext.Provider>\n  );\n};\n\nexport default ProductProvider;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,QAAQ,QAAQ,iBAAiB;AAAC;AAE3C,OAAO,MAAMC,cAAc,gBAAGJ,aAAa,EAAE;AAE7C,MAAMK,eAAe,GAAG,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAA;EACxC;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMO,aAAa,GAAG,YAAY;MAChC,IAAI;QACF,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMP,QAAQ,CAACI,QAAQ,CAACI,IAAI,EAAE;QAC/CH,WAAW,CAACE,IAAI,CAAC;QACjBE,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEN,QAAQ,CAAC;MACtD,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAEDL,aAAa,EAAE;EACjB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAERG,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEN,QAAQ,CAAC;EAEpD,oBACE,QAAC,cAAc,CAAC,QAAQ;IAAC,KAAK,EAAE;MAAEA;IAAS,CAAE;IAAA,UAC1CD;EAAQ;IAAA;IAAA;IAAA;EAAA,QACe;AAE9B,CAAC;AAAC,GA1BID,eAAe;AAAA,KAAfA,eAAe;AA4BrB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}